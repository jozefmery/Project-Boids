"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;
exports.removeAll = removeAll;

function _default(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this;
  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j;
  if (!node) return this;
  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  }

  while (node.data !== d) {
    if (!(previous = node, node = node.next)) return this;
  }

  if (next = node.next) delete node.next;
  if (previous) return next ? previous.next = next : delete previous.next, this;
  if (!parent) return this._root = next, this;
  next ? parent[i] = next : delete parent[i];

  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) {
    this.remove(data[i]);
  }

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW1vdmUuanMiXSwibmFtZXMiOlsiZCIsImlzTmFOIiwieCIsIl94IiwiY2FsbCIsInkiLCJfeSIsInBhcmVudCIsIm5vZGUiLCJfcm9vdCIsInJldGFpbmVyIiwicHJldmlvdXMiLCJuZXh0IiwieDAiLCJfeDAiLCJ5MCIsIl95MCIsIngxIiwiX3gxIiwieTEiLCJfeTEiLCJ4bSIsInltIiwicmlnaHQiLCJib3R0b20iLCJpIiwiaiIsImxlbmd0aCIsImRhdGEiLCJyZW1vdmVBbGwiLCJuIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFlLGtCQUFTQSxDQUFULEVBQVk7QUFDekIsTUFBSUMsS0FBSyxDQUFDQyxDQUFDLEdBQUcsQ0FBQyxLQUFLQyxFQUFMLENBQVFDLElBQVIsQ0FBYSxJQUFiLEVBQW1CSixDQUFuQixDQUFOLENBQUwsSUFBcUNDLEtBQUssQ0FBQ0ksQ0FBQyxHQUFHLENBQUMsS0FBS0MsRUFBTCxDQUFRRixJQUFSLENBQWEsSUFBYixFQUFtQkosQ0FBbkIsQ0FBTixDQUE5QyxFQUE0RSxPQUFPLElBQVA7QUFFNUUsTUFBSU8sTUFBSjtBQUFBLE1BQ0lDLElBQUksR0FBRyxLQUFLQyxLQURoQjtBQUFBLE1BRUlDLFFBRko7QUFBQSxNQUdJQyxRQUhKO0FBQUEsTUFJSUMsSUFKSjtBQUFBLE1BS0lDLEVBQUUsR0FBRyxLQUFLQyxHQUxkO0FBQUEsTUFNSUMsRUFBRSxHQUFHLEtBQUtDLEdBTmQ7QUFBQSxNQU9JQyxFQUFFLEdBQUcsS0FBS0MsR0FQZDtBQUFBLE1BUUlDLEVBQUUsR0FBRyxLQUFLQyxHQVJkO0FBQUEsTUFTSWxCLENBVEo7QUFBQSxNQVVJRyxDQVZKO0FBQUEsTUFXSWdCLEVBWEo7QUFBQSxNQVlJQyxFQVpKO0FBQUEsTUFhSUMsS0FiSjtBQUFBLE1BY0lDLE1BZEo7QUFBQSxNQWVJQyxDQWZKO0FBQUEsTUFnQklDLENBaEJKO0FBbUJBLE1BQUksQ0FBQ2xCLElBQUwsRUFBVyxPQUFPLElBQVA7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Y2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsKGRhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gIHJldHVybiB0aGlzO1xufVxuIl19