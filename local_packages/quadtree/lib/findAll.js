"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _quad = _interopRequireDefault(require("./quad"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _default(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i,
      result = [];
  if (node) quads.push(new _quad["default"](node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;

    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;
      quads.push(new _quad["default"](node[3], xm, ym, x2, y2), new _quad["default"](node[2], x1, ym, xm, y2), new _quad["default"](node[1], xm, y1, x2, ym), new _quad["default"](node[0], x1, y1, xm, ym));

      if (i = (y >= ym) << 1 | x >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;

        if (d2 < radius) {
          do {
            result.push(node.data);
          } while (node = node.next);
        }
      }
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kQWxsLmpzIl0sIm5hbWVzIjpbIngiLCJ5IiwicmFkaXVzIiwiZGF0YSIsIngwIiwiX3gwIiwieTAiLCJfeTAiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwiX3gxIiwieTMiLCJfeTEiLCJxdWFkcyIsIm5vZGUiLCJfcm9vdCIsInEiLCJpIiwicmVzdWx0IiwicHVzaCIsIlF1YWQiLCJJbmZpbml0eSIsInBvcCIsImxlbmd0aCIsInhtIiwieW0iLCJkeCIsIl94IiwiY2FsbCIsImR5IiwiX3kiLCJkMiIsIm5leHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVlLGtCQUFTQSxDQUFULEVBQVlDLENBQVosRUFBZUMsTUFBZixFQUF1QjtBQUNwQyxNQUFJQyxJQUFKO0FBQUEsTUFDSUMsRUFBRSxHQUFHLEtBQUtDLEdBRGQ7QUFBQSxNQUVJQyxFQUFFLEdBQUcsS0FBS0MsR0FGZDtBQUFBLE1BR0lDLEVBSEo7QUFBQSxNQUlJQyxFQUpKO0FBQUEsTUFLSUMsRUFMSjtBQUFBLE1BTUlDLEVBTko7QUFBQSxNQU9JQyxFQUFFLEdBQUcsS0FBS0MsR0FQZDtBQUFBLE1BUUlDLEVBQUUsR0FBRyxLQUFLQyxHQVJkO0FBQUEsTUFTSUMsS0FBSyxHQUFHLEVBVFo7QUFBQSxNQVVJQyxJQUFJLEdBQUcsS0FBS0MsS0FWaEI7QUFBQSxNQVdJQyxDQVhKO0FBQUEsTUFZSUMsQ0FaSjtBQUFBLE1BYUlDLE1BQU0sR0FBRyxFQWJiO0FBZUEsTUFBSUosSUFBSixFQUFVRCxLQUFLLENBQUNNLElBQU4sQ0FBVyxJQUFJQyxnQkFBSixDQUFTTixJQUFULEVBQWViLEVBQWYsRUFBbUJFLEVBQW5CLEVBQXVCTSxFQUF2QixFQUEyQkUsRUFBM0IsQ0FBWDtBQUNWLE1BQUlaLE1BQU0sSUFBSSxJQUFkLEVBQW9CQSxNQUFNLEdBQUdzQixRQUFULENBQXBCLEtBQ0s7QUFDSHBCLElBQUFBLEVBQUUsR0FBR0osQ0FBQyxHQUFHRSxNQUFULEVBQWlCSSxF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Rjs7QUFFRCxTQUFPZCxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xuICB2YXIgZGF0YSxcbiAgICAgIHgwID0gdGhpcy5feDAsXG4gICAgICB5MCA9IHRoaXMuX3kwLFxuICAgICAgeDEsXG4gICAgICB5MSxcbiAgICAgIHgyLFxuICAgICAgeTIsXG4gICAgICB4MyA9IHRoaXMuX3gxLFxuICAgICAgeTMgPSB0aGlzLl95MSxcbiAgICAgIHF1YWRzID0gW10sXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIHEsXG4gICAgICBpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcbiAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgZWxzZSB7XG4gICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XG4gICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgcmFkaXVzICo9IHJhZGl1cztcbiAgfVxuXG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgaWYgKCEobm9kZSA9IHEubm9kZSlcbiAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgIHx8ICh4MiA9IHEueDEpIDwgeDBcbiAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgcXVhZHMucHVzaChcbiAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMV0sIHhtLCB5MSwgeDIsIHltKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICApO1xuXG4gICAgICAvLyBWaXNpdCB0aGUgY2xvc2VzdCBxdWFkcmFudCBmaXJzdC5cbiAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiBJZiB3aXRoaW4gcmFkaXVzLCBhZGQgaXQuXG4gICAgZWxzZSB7XG4gICAgICB2YXIgZHggPSB4IC0gK3RoaXMuX3guY2FsbChudWxsLCBub2RlLmRhdGEpLFxuICAgICAgICAgIGR5ID0geSAtICt0aGlzLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgaWYgKGQyIDwgcmFkaXVzKSB7XG4gICAgICAgIC8vIGFkZCBhbGwgY29pbmNpZGVuY2UgcG9pbnRzIGFzIHdlbGxcbiAgICAgICAgZG8gcmVzdWx0LnB1c2gobm9kZS5kYXRhKTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59Il19